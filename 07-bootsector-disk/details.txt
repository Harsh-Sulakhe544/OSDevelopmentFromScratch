"https://www.cs.uic.edu/~jbell/CourseNotes/OperatingSystems/10_MassStorage.html"
"https://stanislavs.org/helppc/int_13-2.html" ==> int 13h guide
"https://www.geeksforgeeks.org/disk-access-time-in-os/" ==> DISK CALCULATIONS
'''
Thus, any bytes after byte 512 correspond to sector 2 of cylinder 0 of head 0 of hdd 0 ==> 

+---------------------+
|      Cylinder 0     |
|                     |
|  +-----------------+|
|  |   Head 0       ||
|  |                 ||
|  |  Track 0       ||
|  |                 ||
|  |  +-----------+  ||
|  |  | Sector 0  |  ||
|  |  |  (0-511)  |  ||
|  |  +-----------+  ||
|  |  | Sector 1  |  ||
|  |  |  (512-1023)| ||
|  |  +-----------+  ||
|  |  | Sector 2  |  ||
|  |  |  (1024-1535)|||
|  |  +-----------+  ||
|  +-----------------+|
+---------------------+

Disk Structure Overview

    Cylinders: A cylinder is a set of tracks located at the same position on multiple platters. For instance, if you have two platters, the first track on each platter forms a cylinder.

    Heads: Each platter has a read/write head. The head is responsible for reading data from and writing data to the disk surface.

    Sectors: Each track is divided into sectors. A sector is the smallest unit of storage on a disk, and it usually contains 512 bytes of data.

Breakdown of the Statement

    Byte 512: This is the end of the first sector (sector 0) of the first track (cylinder 0, head 0). In a typical HDD, the first sector starts at byte 0 and ends at byte 511.

    Bytes after byte 512: This indicates that the data following byte 512 belongs to the next sector, which is sector 1.

    Sector 2 of Cylinder 0, Head 0: This means that the data starting from byte 1024 (which is the beginning of sector 2) corresponds to the second sector of the first track on the first platter.

''' 


'''
EXPLANATION : 

Very Detailed Answer: Explanation of Disk Load Assembly Code
Question Summary

In this section, we will delve into the provided assembly code snippet, focusing on the purpose of the push dx instruction and the significance of the mov al, dh instruction. We will also illustrate these concepts with a simple example and a pictorial representation to enhance understanding.
Answer

The assembly code snippet provided is a routine designed to read sectors from a disk using BIOS interrupt 0x13. This routine is crucial for low-level disk operations in a real-mode environment, such as booting from a floppy disk or hard drive. Let's break down the code step by step, particularly focusing on the instructions in question.
Code Breakdown

    Pushing Registers onto the Stack

    language-assembly

pusha
push dx

    The pusha instruction saves all general-purpose registers onto the stack. This is essential because the routine will modify these registers, and we want to preserve their original values for later use.
    The push dx instruction specifically saves the dx register onto the stack. The dx register often contains parameters or data that the routine may need after the disk operation. By pushing it onto the stack, we ensure that we can restore it later, maintaining the integrity of the input parameters.

Setting Up for Disk Read

language-assembly

    mov ah, 0x02 ; ah <- int 0x13 function. 0x02 = 'read'
    mov al, dh   ; al <- number of sectors to read (0x01 .. 0x80)

        The mov ah, 0x02 instruction sets up the ah register to indicate that we want to perform a read operation using BIOS interrupt 0x13.
        The mov al, dh instruction is particularly important. Here, dh contains the number of sectors to read, which can range from 0x01 to 0x80. By moving the value of dh into al, we are specifying how many sectors we want to read from the disk. This is crucial because the BIOS interrupt will use this value to determine how many sectors to read into the buffer.

Example and Pictorial Representation

Let’s consider a simple example where we want to read 3 sectors from a disk. In this case, dh would be set to 0x03.
Initial Setup

    Registers Before Execution:
        dx = 0x0003 (indicating we want to read 3 sectors)
        dh = 0x03 (number of sectors to read)
        dl = 0x80 (indicating the hard drive)

Execution Flow

    Push Registers:
        pusha saves all registers.
        push dx saves dx (0x0003) onto the stack.

    Set Up for Disk Read:
        mov ah, 0x02 prepares for the read operation.
        mov al, dh sets al to 0x03, indicating we want to read 3 sectors.

    BIOS Interrupt Call:
        int 0x13 is called, which triggers the BIOS to read the specified number of sectors from the disk into the buffer pointed to by es:bx.

Pictorial Representation

+-------------------+
|   Disk (Hard Drive)|
|                   |
|   S1  S2  S3  S4  |
|   (Read)          |
+-------------------+

    In this representation, S1, S2, S3, and S4 are sectors on the disk. The routine will read S1, S2, and S3 into the buffer.

Error Handling

After the disk read operation, the code checks for errors:

    If an error occurs, it jumps to the disk_error label, where it handles the error appropriately.
    It also checks if the number of sectors read (stored in al) matches the number requested (stored in dh). If they do not match, it jumps to sectors_error.

Conclusion

In summary, the push dx instruction is vital for preserving the state of the dx register, while the mov al, dh instruction is crucial for specifying the number of sectors to read from the disk. This routine exemplifies how low-level disk operations are performed in assembly language, providing a foundation for understanding more complex interactions with hardware.


WHY ES:BX COMBINATION : 
==> Very Detailed Answer: Understanding BIOS Interrupt Call with es:bx
Question Summary

The question seeks to understand the significance of the es:bx register pair in the context of a BIOS interrupt call, specifically when invoking int 0x13 to read sectors from a disk. A detailed explanation, along with a pictorial representation, is required to elucidate this concept.
Answer

In the realm of low-level programming, particularly when dealing with BIOS interrupts, understanding the role of segment and offset registers is crucial. The es:bx register pair is a classic example of how memory addressing works in Assembly language, especially in the context of BIOS interrupt calls.
What is int 0x13?

The int 0x13 instruction is a BIOS interrupt that provides a set of services for disk operations. This includes reading from and writing to disk drives. When you invoke this interrupt, you are essentially requesting the BIOS to perform a specific operation on the disk.
The Role of es:bx

In the context of int 0x13, the es:bx register pair is used to specify the memory address where the data read from the disk will be stored. Here’s a breakdown of how this works:

    es (Extra Segment Register): This register holds the segment part of the address. In real mode, memory is accessed using a combination of a segment and an offset. The segment register points to a 64KB block of memory.

    bx (Base Register): This register holds the offset within the segment specified by es. Together, es:bx forms a complete address in memory.

Pictorial Representation

To visualize this, consider the following diagram:

+-------------------+
|      Memory       |
|                   |
|  Segment: 0x1000  |  <-- es (Extra Segment)
|                   |
|  +---------------+|
|  |   Buffer      |  <-- Data read from disk will be stored here
|  |   (0x200)    |  <-- bx (Base Register)
|  +---------------+|
|                   |
+-------------------+

In this example:

    The es register is set to 0x1000, which means the segment starts at memory address 0x10000 (0x1000 * 16).

    The bx register is set to 0x0200, which is the offset within that segment.

    Therefore, the effective address where the data will be stored is calculated as:

    Effective Address = (es * 16) + bx
                      = (0x1000 * 16) + 0x0200
                      = 0x10000 + 0x0200
                      = 0x10200

How It Works in Practice

When you execute the instruction to read sectors from the disk, the following happens:

    Set Up Registers: You load the es and bx registers with the appropriate values to point to the desired memory location.
    Call BIOS Interrupt: You invoke int 0x13 with the appropriate parameters (like the number of sectors to read, drive number, etc.).
    BIOS Execution: The BIOS takes over, reads the specified number of sectors from the disk, and writes the data directly into the memory location specified by es:bx.

Example Code

Here’s a simple example in Assembly language that demonstrates this process:

language-assembly

section .data
    buffer resb 512  ; Reserve 512 bytes for one sector

section .text
global _start

_start:
    ; Set up the segment and offset
    mov ax, buffer    ; Load the address of the buffer
    mov es, ax        ; Set es to point to the buffer
    xor bx, bx        ; Set bx to 0 (offset)

    ; Set up the registers for int 0x13
    mov ah, 0x02      ; BIOS function to read sectors
    mov al, 1         ; Number of sectors to read
    mov ch, 0         ; Cylinder number
    mov cl, 2         ; Sector number
    mov dh, 0         ; Head number
    mov dl, 0x80      ; Drive number (first hard disk)

    ; Call BIOS interrupt
    int 0x13

    ; Check for errors
    jc error          ; Jump if carry flag is set (error)

    ; Continue with the program...

error:
    ; Handle error...

Conclusion

In summary, the es:bx register pair is essential for specifying the memory location where data read from the disk will be stored during a BIOS interrupt call. Understanding this mechanism is fundamental for anyone working with low-level programming and BIOS services. The combination of segment and offset allows for efficient memory management and direct interaction with hardware, which is a hallmark of Assembly language programming.
'''


""
'https://stanislavs.org/helppc/int_13-1.html' ==> AL

MAIN.ASM : FOR DISK LOAD 
==> 
Very Detailed Answer: Assembly Code Explanation with Dry Run and Pictorial Representation
Question Summary

The task is to explain a given assembly code snippet, perform a dry run using a simple example, and provide a pictorial representation for better understanding.
Answer

The provided assembly code is a boot sector program that runs when a computer is powered on. It is responsible for loading data from the disk into memory and displaying it. Let's break down the code step by step, perform a dry run, and visualize the process.
Code Breakdown

    Setting Up the Stack:

    language-assembly

mov bp, 0x8000 ; set the stack safely away from us
mov sp, bp

Here, the base pointer (bp) is set to 0x8000, which is a safe location in memory. The stack pointer (sp) is then initialized to the same value, establishing the stack segment.

Preparing to Load Disk Data:

language-assembly

mov bx, 0x9000 ; es:bx = 0x0000:0x9000 = 0x09000
mov dh, 2 ; read 2 sectors

The bx register is set to 0x9000, which will be the destination address for the data read from the disk. The dh register is set to 2, indicating that two sectors will be read from the disk.

Calling Disk Load Function:

language-assembly

call disk_load

This instruction calls a function (not shown in the snippet) that handles the reading of the specified sectors from the disk into memory starting at the address in bx.

Retrieving and Printing Data:

language-assembly

mov dx, [0x9000] ; retrieve the first loaded word, 0xdada
call print_hex
call print_nl
mov dx, [0x9000 + 512] ; first word from second loaded sector, 0xface
call print_hex

After loading the sectors, the first word (2 bytes) from the first sector is retrieved from memory at 0x9000 and printed in hexadecimal format. The program then retrieves the first word from the second sector (located at 0x9000 + 512, since each sector is 512 bytes) and prints it as well.

Infinite Loop:

language-assembly

jmp $

This instruction creates an infinite loop, effectively halting further execution.

Boot Sector Signature:

language-assembly

times 510 - ($-$$) db 0
dw 0xaa55

This part ensures that the boot sector is exactly 512 bytes long by padding with zeros and includes the boot signature 0xAA55, which is required for the BIOS to recognize the bootable sector.

Data Initialization:

language-assembly

    times 256 dw 0xdada ; sector 2 = 512 bytes
    times 256 dw 0xface ; sector 3 = 512 bytes

    This initializes the data for the two sectors being read. Sector 2 contains the value 0xdada, and sector 3 contains 0xface.

Dry Run Example

Let's assume we are running this code on a system where the disk contains the specified values.

    Initial Setup:
        bp = 0x8000
        sp = 0x8000
        bx = 0x9000
        dh = 2

    Disk Load:
        The disk_load function reads two sectors from the disk into memory starting at 0x9000.
        After loading:
            Memory at 0x9000 contains 0xdada
            Memory at 0x9000 + 512 (i.e., 0x9000 + 0x200) contains 0xface

    Printing Values:
        The first call to print_hex outputs 0xdada.
        The second call to print_nl outputs a newline.
        The second call to print_hex outputs 0xface.

Pictorial Representation

Below is a simplified representation of the memory layout before and after the execution of the code:

Before Execution:
+------------------+
| Address          | Data
+------------------+
| 0x9000           | (empty)
| 0x9001           | (empty)
| ...              | ...
| 0x90FF           | (empty)
| 0x9100           | (empty)
| ...              | ...
| 0x91FF           | (empty)
+------------------+

After Execution:
+------------------+
| Address          | Data
+------------------+
| 0x9000           | 0xdada
| 0x9001           | 0xdada
| ...              | ...
| 0x90FF           | (empty)
| 0x9100           | 0xface
| 0x9101           | 0xface
| ...              | ...
| 0x91FF           | (empty)
+------------------+

Conclusion

This assembly code serves as a fundamental example of how a boot sector operates, loading data from a disk and displaying it. The dry run illustrates the flow of data and the operations performed, while the pictorial representation provides a clear view of memory usage before and after execution. Understanding such low-level operations is crucial for grasping how computers boot and manage data at the hardware level. 
""

'''
output : 
0xDADA 
oxFACE

"
COMPILATION AND OBSERVE DADA IS READ CORRECTLY , BUT CAFE IS READ INSTEAD OF FACE 
==> 
harsh@harsh-P6-2010IX:~/Desktop/OSDevelopmentFromScratch/07-bootsector-disk$ nasm -f bin boot_sect_main.asm -o boot_sect_main.bin

harsh@harsh-P6-2010IX:~/Desktop/OSDevelopmentFromScratch/07-bootsector-disk$ qemu-system-x86_64 -drive format=raw,file=boot_sect_main.bin -boot c 

harsh@harsh-P6-2010IX:~/Desktop/OSDevelopmentFromScratch/07-bootsector-disk$ xxd boot_sect_main.bin

00000000: bd00 8089 ecbb 0090 b602 e866 008b 1600  ...........f....
00000010: 90e8 2b00 e81b 008b 1600 92e8 2100 ebfe  ..+.........!...
00000020: 608a 073c 0074 09b4 0ecd 1083 c301 ebf1  `..<.t..........
00000030: 61c3 60b4 0eb0 0acd 10b0 0dcd 1061 c360  a.`..........a.`
00000040: b900 0083 f904 741c 89d0 83e0 0f04 303c  ......t.......0<
00000050: 397e 0204 07bb 717c 29cb 8807 c1ca 0483  9~....q|).......
00000060: c101 ebdf bb6c 7ce8 b6ff 61c3 3078 3030  .....l|...a.0x00
00000070: 3030 0060 52b4 0288 f0b1 02b5 00b6 00cd  00.`R...........
00000080: 1372 075a 38f0 7512 61c3 bba2 7ce8 90ff  .r.Z8.u.a...|...
00000090: e89f ff88 e6e8 a7ff eb06 bbb2 7ce8 80ff  ............|...
000000a0: ebfe 4469 736b 2072 6561 6420 6572 726f  ..Disk read erro
000000b0: 7200 496e 636f 7272 6563 7420 6e75 6d62  r.Incorrect numb
000000c0: 6572 206f 6620 7365 6374 6f72 7320 7265  er of sectors re
000000d0: 6164 0000 0000 0000 0000 0000 0000 0000  ad..............
000000e0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000000f0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000100: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000110: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000120: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000130: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000140: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000150: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000160: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000170: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000180: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000190: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000001a0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000001b0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000001c0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000001d0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000001e0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000001f0: 0000 0000 0000 0000 0000 0000 0000 55aa  ..............U.
00000200: dada dada dada dada dada dada dada dada  ................
00000210: dada dada dada dada dada dada dada dada  ................
00000220: dada dada dada dada dada dada dada dada  ................
00000230: dada dada dada dada dada dada dada dada  ................
00000240: dada dada dada dada dada dada dada dada  ................
00000250: dada dada dada dada dada dada dada dada  ................
00000260: dada dada dada dada dada dada dada dada  ................
00000270: dada dada dada dada dada dada dada dada  ................
00000280: dada dada dada dada dada dada dada dada  ................
00000290: dada dada dada dada dada dada dada dada  ................
000002a0: dada dada dada dada dada dada dada dada  ................
000002b0: dada dada dada dada dada dada dada dada  ................
000002c0: dada dada dada dada dada dada dada dada  ................
000002d0: dada dada dada dada dada dada dada dada  ................
000002e0: dada dada dada dada dada dada dada dada  ................
000002f0: dada dada dada dada dada dada dada dada  ................
00000300: dada dada dada dada dada dada dada dada  ................
00000310: dada dada dada dada dada dada dada dada  ................
00000320: dada dada dada dada dada dada dada dada  ................
00000330: dada dada dada dada dada dada dada dada  ................
00000340: dada dada dada dada dada dada dada dada  ................
00000350: dada dada dada dada dada dada dada dada  ................
00000360: dada dada dada dada dada dada dada dada  ................
00000370: dada dada dada dada dada dada dada dada  ................
00000380: dada dada dada dada dada dada dada dada  ................
00000390: dada dada dada dada dada dada dada dada  ................
000003a0: dada dada dada dada dada dada dada dada  ................
000003b0: dada dada dada dada dada dada dada dada  ................
000003c0: dada dada dada dada dada dada dada dada  ................
000003d0: dada dada dada dada dada dada dada dada  ................
000003e0: dada dada dada dada dada dada dada dada  ................
000003f0: dada dada dada dada dada dada dada dada  ................
00000400: cefa cefa cefa cefa cefa cefa cefa cefa  ................
00000410: cefa cefa cefa cefa cefa cefa cefa cefa  ................
00000420: cefa cefa cefa cefa cefa cefa cefa cefa  ................
00000430: cefa cefa cefa cefa cefa cefa cefa cefa  ................
00000440: cefa cefa cefa cefa cefa cefa cefa cefa  ................
00000450: cefa cefa cefa cefa cefa cefa cefa cefa  ................
00000460: cefa cefa cefa cefa cefa cefa cefa cefa  ................
00000470: cefa cefa cefa cefa cefa cefa cefa cefa  ................
00000480: cefa cefa cefa cefa cefa cefa cefa cefa  ................
00000490: cefa cefa cefa cefa cefa cefa cefa cefa  ................
000004a0: cefa cefa cefa cefa cefa cefa cefa cefa  ................
000004b0: cefa cefa cefa cefa cefa cefa cefa cefa  ................
000004c0: cefa cefa cefa cefa cefa cefa cefa cefa  ................
000004d0: cefa cefa cefa cefa cefa cefa cefa cefa  ................
000004e0: cefa cefa cefa cefa cefa cefa cefa cefa  ................
000004f0: cefa cefa cefa cefa cefa cefa cefa cefa  ................
00000500: cefa cefa cefa cefa cefa cefa cefa cefa  ................
00000510: cefa cefa cefa cefa cefa cefa cefa cefa  ................
00000520: cefa cefa cefa cefa cefa cefa cefa cefa  ................
00000530: cefa cefa cefa cefa cefa cefa cefa cefa  ................
00000540: cefa cefa cefa cefa cefa cefa cefa cefa  ................
00000550: cefa cefa cefa cefa cefa cefa cefa cefa  ................
00000560: cefa cefa cefa cefa cefa cefa cefa cefa  ................
00000570: cefa cefa cefa cefa cefa cefa cefa cefa  ................
00000580: cefa cefa cefa cefa cefa cefa cefa cefa  ................
00000590: cefa cefa cefa cefa cefa cefa cefa cefa  ................
000005a0: cefa cefa cefa cefa cefa cefa cefa cefa  ................
000005b0: cefa cefa cefa cefa cefa cefa cefa cefa  ................
000005c0: cefa cefa cefa cefa cefa cefa cefa cefa  ................
000005d0: cefa cefa cefa cefa cefa cefa cefa cefa  ................
000005e0: cefa cefa cefa cefa cefa cefa cefa cefa  ................
000005f0: cefa cefa cefa cefa cefa cefa cefa cefa  ................
"


even tried : 'There are two quick options:

    Try the flag -fda for example, qemu -fda boot_sect_main.bin which will set dl as 0x00, it seems to work fine then.
    Explicitly use the flag -boot, e.g. qemu boot_sect_main.bin -boot c which automatically sets dl as 0x80 and lets the bootloader read data

STILL NOT RESOLVED 
'

'''


'''
I WANT DIS-ASSEMBLY : 

"
harsh@harsh-P6-2010IX:~/Desktop/OSDevelopmentFromScratch/07-bootsector-disk$ ndisasm boot_sect_main.bin
00000000  BD0080            mov bp,0x8000
00000003  89EC              mov sp,bp
00000005  BB0090            mov bx,0x9000
00000008  B602              mov dh,0x2
0000000A  E86600            call 0x73
0000000D  8B160090          mov dx,[0x9000]
00000011  E82B00            call 0x3f
00000014  E81B00            call 0x32
00000017  8B160092          mov dx,[0x9200]
0000001B  E82100            call 0x3f
0000001E  EBFE              jmp short 0x1e
00000020  60                pusha
00000021  8A07              mov al,[bx]
00000023  3C00              cmp al,0x0
00000025  7409              jz 0x30
00000027  B40E              mov ah,0xe
00000029  CD10              int 0x10
0000002B  83C301            add bx,byte +0x1
0000002E  EBF1              jmp short 0x21
00000030  61                popa
00000031  C3                ret
00000032  60                pusha
00000033  B40E              mov ah,0xe
00000035  B00A              mov al,0xa
00000037  CD10              int 0x10
00000039  B00D              mov al,0xd
0000003B  CD10              int 0x10
0000003D  61                popa
0000003E  C3                ret
0000003F  60                pusha
00000040  B90000            mov cx,0x0
00000043  83F904            cmp cx,byte +0x4
00000046  741C              jz 0x64
00000048  89D0              mov ax,dx
0000004A  83E00F            and ax,byte +0xf
0000004D  0430              add al,0x30
0000004F  3C39              cmp al,0x39
00000051  7E02              jng 0x55
00000053  0407              add al,0x7
00000055  BB717C            mov bx,0x7c71
00000058  29CB              sub bx,cx
0000005A  8807              mov [bx],al
0000005C  C1CA04            ror dx,byte 0x4
0000005F  83C101            add cx,byte +0x1
00000062  EBDF              jmp short 0x43
00000064  BB6C7C            mov bx,0x7c6c
00000067  E8B6FF            call 0x20
0000006A  61                popa
0000006B  C3                ret
0000006C  307830            xor [bx+si+0x30],bh
0000006F  3030              xor [bx+si],dh
00000071  3000              xor [bx+si],al
00000073  60                pusha
00000074  52                push dx
00000075  B402              mov ah,0x2
00000077  88F0              mov al,dh
00000079  B102              mov cl,0x2
0000007B  B500              mov ch,0x0
0000007D  B600              mov dh,0x0
0000007F  CD13              int 0x13
00000081  7207              jc 0x8a
00000083  5A                pop dx
00000084  38F0              cmp al,dh
00000086  7512              jnz 0x9a
00000088  61                popa
00000089  C3                ret
0000008A  BBA27C            mov bx,0x7ca2
0000008D  E890FF            call 0x20
00000090  E89FFF            call 0x32
00000093  88E6              mov dh,ah
00000095  E8A7FF            call 0x3f
00000098  EB06              jmp short 0xa0
0000009A  BBB27C            mov bx,0x7cb2
0000009D  E880FF            call 0x20
000000A0  EBFE              jmp short 0xa0
000000A2  44                inc sp
000000A3  69736B2072        imul si,[bp+di+0x6b],word 0x7220
000000A8  6561              gs popa
000000AA  64206572          and [fs:di+0x72],ah
000000AE  726F              jc 0x11f
000000B0  7200              jc 0xb2
000000B2  49                dec cx
000000B3  6E                outsb
000000B4  636F72            arpl [bx+0x72],bp
000000B7  7265              jc 0x11e
000000B9  637420            arpl [si+0x20],si
000000BC  6E                outsb
000000BD  756D              jnz 0x12c
000000BF  626572            bound sp,[di+0x72]
000000C2  206F66            and [bx+0x66],ch
000000C5  207365            and [bp+di+0x65],dh
000000C8  63746F            arpl [si+0x6f],si
000000CB  7273              jc 0x140
000000CD  207265            and [bp+si+0x65],dh
000000D0  61                popa
000000D1  640000            add [fs:bx+si],al
000000D4  0000              add [bx+si],al
000000D6  0000              add [bx+si],al
000000D8  0000              add [bx+si],al
000000DA  0000              add [bx+si],al
000000DC  0000              add [bx+si],al
000000DE  0000              add [bx+si],al
000000E0  0000              add [bx+si],al
000000E2  0000              add [bx+si],al
000000E4  0000              add [bx+si],al
000000E6  0000              add [bx+si],al
000000E8  0000              add [bx+si],al
000000EA  0000              add [bx+si],al
000000EC  0000              add [bx+si],al
000000EE  0000              add [bx+si],al
000000F0  0000              add [bx+si],al
000000F2  0000              add [bx+si],al
000000F4  0000              add [bx+si],al
000000F6  0000              add [bx+si],al
000000F8  0000              add [bx+si],al
000000FA  0000              add [bx+si],al
000000FC  0000              add [bx+si],al
000000FE  0000              add [bx+si],al
00000100  0000              add [bx+si],al
00000102  0000              add [bx+si],al
00000104  0000              add [bx+si],al
00000106  0000              add [bx+si],al
00000108  0000              add [bx+si],al
0000010A  0000              add [bx+si],al
0000010C  0000              add [bx+si],al
0000010E  0000              add [bx+si],al
00000110  0000              add [bx+si],al
00000112  0000              add [bx+si],al
00000114  0000              add [bx+si],al
00000116  0000              add [bx+si],al
00000118  0000              add [bx+si],al
0000011A  0000              add [bx+si],al
0000011C  0000              add [bx+si],al
0000011E  0000              add [bx+si],al
00000120  0000              add [bx+si],al
00000122  0000              add [bx+si],al
00000124  0000              add [bx+si],al
00000126  0000              add [bx+si],al
00000128  0000              add [bx+si],al
0000012A  0000              add [bx+si],al
0000012C  0000              add [bx+si],al
0000012E  0000              add [bx+si],al
00000130  0000              add [bx+si],al
00000132  0000              add [bx+si],al
00000134  0000              add [bx+si],al
00000136  0000              add [bx+si],al
00000138  0000              add [bx+si],al
0000013A  0000              add [bx+si],al
0000013C  0000              add [bx+si],al
0000013E  0000              add [bx+si],al
00000140  0000              add [bx+si],al
00000142  0000              add [bx+si],al
00000144  0000              add [bx+si],al
00000146  0000              add [bx+si],al
00000148  0000              add [bx+si],al
0000014A  0000              add [bx+si],al
0000014C  0000              add [bx+si],al
0000014E  0000              add [bx+si],al
00000150  0000              add [bx+si],al
00000152  0000              add [bx+si],al
00000154  0000              add [bx+si],al
00000156  0000              add [bx+si],al
00000158  0000              add [bx+si],al
0000015A  0000              add [bx+si],al
0000015C  0000              add [bx+si],al
0000015E  0000              add [bx+si],al
00000160  0000              add [bx+si],al
00000162  0000              add [bx+si],al
00000164  0000              add [bx+si],al
00000166  0000              add [bx+si],al
00000168  0000              add [bx+si],al
0000016A  0000              add [bx+si],al
0000016C  0000              add [bx+si],al
0000016E  0000              add [bx+si],al
00000170  0000              add [bx+si],al
00000172  0000              add [bx+si],al
00000174  0000              add [bx+si],al
00000176  0000              add [bx+si],al
00000178  0000              add [bx+si],al
0000017A  0000              add [bx+si],al
0000017C  0000              add [bx+si],al
0000017E  0000              add [bx+si],al
00000180  0000              add [bx+si],al
00000182  0000              add [bx+si],al
00000184  0000              add [bx+si],al
00000186  0000              add [bx+si],al
00000188  0000              add [bx+si],al
0000018A  0000              add [bx+si],al
0000018C  0000              add [bx+si],al
0000018E  0000              add [bx+si],al
00000190  0000              add [bx+si],al
00000192  0000              add [bx+si],al
00000194  0000              add [bx+si],al
00000196  0000              add [bx+si],al
00000198  0000              add [bx+si],al
0000019A  0000              add [bx+si],al
0000019C  0000              add [bx+si],al
0000019E  0000              add [bx+si],al
000001A0  0000              add [bx+si],al
000001A2  0000              add [bx+si],al
000001A4  0000              add [bx+si],al
000001A6  0000              add [bx+si],al
000001A8  0000              add [bx+si],al
000001AA  0000              add [bx+si],al
000001AC  0000              add [bx+si],al
000001AE  0000              add [bx+si],al
000001B0  0000              add [bx+si],al
000001B2  0000              add [bx+si],al
000001B4  0000              add [bx+si],al
000001B6  0000              add [bx+si],al
000001B8  0000              add [bx+si],al
000001BA  0000              add [bx+si],al
000001BC  0000              add [bx+si],al
000001BE  0000              add [bx+si],al
000001C0  0000              add [bx+si],al
000001C2  0000              add [bx+si],al
000001C4  0000              add [bx+si],al
000001C6  0000              add [bx+si],al
000001C8  0000              add [bx+si],al
000001CA  0000              add [bx+si],al
000001CC  0000              add [bx+si],al
000001CE  0000              add [bx+si],al
000001D0  0000              add [bx+si],al
000001D2  0000              add [bx+si],al
000001D4  0000              add [bx+si],al
000001D6  0000              add [bx+si],al
000001D8  0000              add [bx+si],al
000001DA  0000              add [bx+si],al
000001DC  0000              add [bx+si],al
000001DE  0000              add [bx+si],al
000001E0  0000              add [bx+si],al
000001E2  0000              add [bx+si],al
000001E4  0000              add [bx+si],al
000001E6  0000              add [bx+si],al
000001E8  0000              add [bx+si],al
000001EA  0000              add [bx+si],al
000001EC  0000              add [bx+si],al
000001EE  0000              add [bx+si],al
000001F0  0000              add [bx+si],al
000001F2  0000              add [bx+si],al
000001F4  0000              add [bx+si],al
000001F6  0000              add [bx+si],al
000001F8  0000              add [bx+si],al
000001FA  0000              add [bx+si],al
000001FC  0000              add [bx+si],al
000001FE  55                push bp
000001FF  AA                stosb
00000200  DADA              fcmovu st2
00000202  DADA              fcmovu st2
00000204  DADA              fcmovu st2
00000206  DADA              fcmovu st2
00000208  DADA              fcmovu st2
0000020A  DADA              fcmovu st2
0000020C  DADA              fcmovu st2
0000020E  DADA              fcmovu st2
00000210  DADA              fcmovu st2
00000212  DADA              fcmovu st2
00000214  DADA              fcmovu st2
00000216  DADA              fcmovu st2
00000218  DADA              fcmovu st2
0000021A  DADA              fcmovu st2
0000021C  DADA              fcmovu st2
0000021E  DADA              fcmovu st2
00000220  DADA              fcmovu st2
00000222  DADA              fcmovu st2
00000224  DADA              fcmovu st2
00000226  DADA              fcmovu st2
00000228  DADA              fcmovu st2
0000022A  DADA              fcmovu st2
0000022C  DADA              fcmovu st2
0000022E  DADA              fcmovu st2
00000230  DADA              fcmovu st2
00000232  DADA              fcmovu st2
00000234  DADA              fcmovu st2
00000236  DADA              fcmovu st2
00000238  DADA              fcmovu st2
0000023A  DADA              fcmovu st2
0000023C  DADA              fcmovu st2
0000023E  DADA              fcmovu st2
00000240  DADA              fcmovu st2
00000242  DADA              fcmovu st2
00000244  DADA              fcmovu st2
00000246  DADA              fcmovu st2
00000248  DADA              fcmovu st2
0000024A  DADA              fcmovu st2
0000024C  DADA              fcmovu st2
0000024E  DADA              fcmovu st2
00000250  DADA              fcmovu st2
00000252  DADA              fcmovu st2
00000254  DADA              fcmovu st2
00000256  DADA              fcmovu st2
00000258  DADA              fcmovu st2
0000025A  DADA              fcmovu st2
0000025C  DADA              fcmovu st2
0000025E  DADA              fcmovu st2
00000260  DADA              fcmovu st2
00000262  DADA              fcmovu st2
00000264  DADA              fcmovu st2
00000266  DADA              fcmovu st2
00000268  DADA              fcmovu st2
0000026A  DADA              fcmovu st2
0000026C  DADA              fcmovu st2
0000026E  DADA              fcmovu st2
00000270  DADA              fcmovu st2
00000272  DADA              fcmovu st2
00000274  DADA              fcmovu st2
00000276  DADA              fcmovu st2
00000278  DADA              fcmovu st2
0000027A  DADA              fcmovu st2
0000027C  DADA              fcmovu st2
0000027E  DADA              fcmovu st2
00000280  DADA              fcmovu st2
00000282  DADA              fcmovu st2
00000284  DADA              fcmovu st2
00000286  DADA              fcmovu st2
00000288  DADA              fcmovu st2
0000028A  DADA              fcmovu st2
0000028C  DADA              fcmovu st2
0000028E  DADA              fcmovu st2
00000290  DADA              fcmovu st2
00000292  DADA              fcmovu st2
00000294  DADA              fcmovu st2
00000296  DADA              fcmovu st2
00000298  DADA              fcmovu st2
0000029A  DADA              fcmovu st2
0000029C  DADA              fcmovu st2
0000029E  DADA              fcmovu st2
000002A0  DADA              fcmovu st2
000002A2  DADA              fcmovu st2
000002A4  DADA              fcmovu st2
000002A6  DADA              fcmovu st2
000002A8  DADA              fcmovu st2
000002AA  DADA              fcmovu st2
000002AC  DADA              fcmovu st2
000002AE  DADA              fcmovu st2
000002B0  DADA              fcmovu st2
000002B2  DADA              fcmovu st2
000002B4  DADA              fcmovu st2
000002B6  DADA              fcmovu st2
000002B8  DADA              fcmovu st2
000002BA  DADA              fcmovu st2
000002BC  DADA              fcmovu st2
000002BE  DADA              fcmovu st2
000002C0  DADA              fcmovu st2
000002C2  DADA              fcmovu st2
000002C4  DADA              fcmovu st2
000002C6  DADA              fcmovu st2
000002C8  DADA              fcmovu st2
000002CA  DADA              fcmovu st2
000002CC  DADA              fcmovu st2
000002CE  DADA              fcmovu st2
000002D0  DADA              fcmovu st2
000002D2  DADA              fcmovu st2
000002D4  DADA              fcmovu st2
000002D6  DADA              fcmovu st2
000002D8  DADA              fcmovu st2
000002DA  DADA              fcmovu st2
000002DC  DADA              fcmovu st2
000002DE  DADA              fcmovu st2
000002E0  DADA              fcmovu st2
000002E2  DADA              fcmovu st2
000002E4  DADA              fcmovu st2
000002E6  DADA              fcmovu st2
000002E8  DADA              fcmovu st2
000002EA  DADA              fcmovu st2
000002EC  DADA              fcmovu st2
000002EE  DADA              fcmovu st2
000002F0  DADA              fcmovu st2
000002F2  DADA              fcmovu st2
000002F4  DADA              fcmovu st2
000002F6  DADA              fcmovu st2
000002F8  DADA              fcmovu st2
000002FA  DADA              fcmovu st2
000002FC  DADA              fcmovu st2
000002FE  DADA              fcmovu st2
00000300  DADA              fcmovu st2
00000302  DADA              fcmovu st2
00000304  DADA              fcmovu st2
00000306  DADA              fcmovu st2
00000308  DADA              fcmovu st2
0000030A  DADA              fcmovu st2
0000030C  DADA              fcmovu st2
0000030E  DADA              fcmovu st2
00000310  DADA              fcmovu st2
00000312  DADA              fcmovu st2
00000314  DADA              fcmovu st2
00000316  DADA              fcmovu st2
00000318  DADA              fcmovu st2
0000031A  DADA              fcmovu st2
0000031C  DADA              fcmovu st2
0000031E  DADA              fcmovu st2
00000320  DADA              fcmovu st2
00000322  DADA              fcmovu st2
00000324  DADA              fcmovu st2
00000326  DADA              fcmovu st2
00000328  DADA              fcmovu st2
0000032A  DADA              fcmovu st2
0000032C  DADA              fcmovu st2
0000032E  DADA              fcmovu st2
00000330  DADA              fcmovu st2
00000332  DADA              fcmovu st2
00000334  DADA              fcmovu st2
00000336  DADA              fcmovu st2
00000338  DADA              fcmovu st2
0000033A  DADA              fcmovu st2
0000033C  DADA              fcmovu st2
0000033E  DADA              fcmovu st2
00000340  DADA              fcmovu st2
00000342  DADA              fcmovu st2
00000344  DADA              fcmovu st2
00000346  DADA              fcmovu st2
00000348  DADA              fcmovu st2
0000034A  DADA              fcmovu st2
0000034C  DADA              fcmovu st2
0000034E  DADA              fcmovu st2
00000350  DADA              fcmovu st2
00000352  DADA              fcmovu st2
00000354  DADA              fcmovu st2
00000356  DADA              fcmovu st2
00000358  DADA              fcmovu st2
0000035A  DADA              fcmovu st2
0000035C  DADA              fcmovu st2
0000035E  DADA              fcmovu st2
00000360  DADA              fcmovu st2
00000362  DADA              fcmovu st2
00000364  DADA              fcmovu st2
00000366  DADA              fcmovu st2
00000368  DADA              fcmovu st2
0000036A  DADA              fcmovu st2
0000036C  DADA              fcmovu st2
0000036E  DADA              fcmovu st2
00000370  DADA              fcmovu st2
00000372  DADA              fcmovu st2
00000374  DADA              fcmovu st2
00000376  DADA              fcmovu st2
00000378  DADA              fcmovu st2
0000037A  DADA              fcmovu st2
0000037C  DADA              fcmovu st2
0000037E  DADA              fcmovu st2
00000380  DADA              fcmovu st2
00000382  DADA              fcmovu st2
00000384  DADA              fcmovu st2
00000386  DADA              fcmovu st2
00000388  DADA              fcmovu st2
0000038A  DADA              fcmovu st2
0000038C  DADA              fcmovu st2
0000038E  DADA              fcmovu st2
00000390  DADA              fcmovu st2
00000392  DADA              fcmovu st2
00000394  DADA              fcmovu st2
00000396  DADA              fcmovu st2
00000398  DADA              fcmovu st2
0000039A  DADA              fcmovu st2
0000039C  DADA              fcmovu st2
0000039E  DADA              fcmovu st2
000003A0  DADA              fcmovu st2
000003A2  DADA              fcmovu st2
000003A4  DADA              fcmovu st2
000003A6  DADA              fcmovu st2
000003A8  DADA              fcmovu st2
000003AA  DADA              fcmovu st2
000003AC  DADA              fcmovu st2
000003AE  DADA              fcmovu st2
000003B0  DADA              fcmovu st2
000003B2  DADA              fcmovu st2
000003B4  DADA              fcmovu st2
000003B6  DADA              fcmovu st2
000003B8  DADA              fcmovu st2
000003BA  DADA              fcmovu st2
000003BC  DADA              fcmovu st2
000003BE  DADA              fcmovu st2
000003C0  DADA              fcmovu st2
000003C2  DADA              fcmovu st2
000003C4  DADA              fcmovu st2
000003C6  DADA              fcmovu st2
000003C8  DADA              fcmovu st2
000003CA  DADA              fcmovu st2
000003CC  DADA              fcmovu st2
000003CE  DADA              fcmovu st2
000003D0  DADA              fcmovu st2
000003D2  DADA              fcmovu st2
000003D4  DADA              fcmovu st2
000003D6  DADA              fcmovu st2
000003D8  DADA              fcmovu st2
000003DA  DADA              fcmovu st2
000003DC  DADA              fcmovu st2
000003DE  DADA              fcmovu st2
000003E0  DADA              fcmovu st2
000003E2  DADA              fcmovu st2
000003E4  DADA              fcmovu st2
000003E6  DADA              fcmovu st2
000003E8  DADA              fcmovu st2
000003EA  DADA              fcmovu st2
000003EC  DADA              fcmovu st2
000003EE  DADA              fcmovu st2
000003F0  DADA              fcmovu st2
000003F2  DADA              fcmovu st2
000003F4  DADA              fcmovu st2
000003F6  DADA              fcmovu st2
000003F8  DADA              fcmovu st2
000003FA  DADA              fcmovu st2
000003FC  DADA              fcmovu st2
000003FE  DADA              fcmovu st2
00000400  CE                into
00000401  FA                cli
00000402  CE                into
00000403  FA                cli
00000404  CE                into
00000405  FA                cli
00000406  CE                into
00000407  FA                cli
00000408  CE                into
00000409  FA                cli
0000040A  CE                into
0000040B  FA                cli
0000040C  CE                into
0000040D  FA                cli
0000040E  CE                into
0000040F  FA                cli
00000410  CE                into
00000411  FA                cli
00000412  CE                into
00000413  FA                cli
00000414  CE                into
00000415  FA                cli
00000416  CE                into
00000417  FA                cli
00000418  CE                into
00000419  FA                cli
0000041A  CE                into
0000041B  FA                cli
0000041C  CE                into
0000041D  FA                cli
0000041E  CE                into
0000041F  FA                cli
00000420  CE                into
00000421  FA                cli
00000422  CE                into
00000423  FA                cli
00000424  CE                into
00000425  FA                cli
00000426  CE                into
00000427  FA                cli
00000428  CE                into
00000429  FA                cli
0000042A  CE                into
0000042B  FA                cli
0000042C  CE                into
0000042D  FA                cli
0000042E  CE                into
0000042F  FA                cli
00000430  CE                into
00000431  FA                cli
00000432  CE                into
00000433  FA                cli
00000434  CE                into
00000435  FA                cli
00000436  CE                into
00000437  FA                cli
00000438  CE                into
00000439  FA                cli
0000043A  CE                into
0000043B  FA                cli
0000043C  CE                into
0000043D  FA                cli
0000043E  CE                into
0000043F  FA                cli
00000440  CE                into
00000441  FA                cli
00000442  CE                into
00000443  FA                cli
00000444  CE                into
00000445  FA                cli
00000446  CE                into
00000447  FA                cli
00000448  CE                into
00000449  FA                cli
0000044A  CE                into
0000044B  FA                cli
0000044C  CE                into
0000044D  FA                cli
0000044E  CE                into
0000044F  FA                cli
00000450  CE                into
00000451  FA                cli
00000452  CE                into
00000453  FA                cli
00000454  CE                into
00000455  FA                cli
00000456  CE                into
00000457  FA                cli
00000458  CE                into
00000459  FA                cli
0000045A  CE                into
0000045B  FA                cli
0000045C  CE                into
0000045D  FA                cli
0000045E  CE                into
0000045F  FA                cli
00000460  CE                into
00000461  FA                cli
00000462  CE                into
00000463  FA                cli
00000464  CE                into
00000465  FA                cli
00000466  CE                into
00000467  FA                cli
00000468  CE                into
00000469  FA                cli
0000046A  CE                into
0000046B  FA                cli
0000046C  CE                into
0000046D  FA                cli
0000046E  CE                into
0000046F  FA                cli
00000470  CE                into
00000471  FA                cli
00000472  CE                into
00000473  FA                cli
00000474  CE                into
00000475  FA                cli
00000476  CE                into
00000477  FA                cli
00000478  CE                into
00000479  FA                cli
0000047A  CE                into
0000047B  FA                cli
0000047C  CE                into
0000047D  FA                cli
0000047E  CE                into
0000047F  FA                cli
00000480  CE                into
00000481  FA                cli
00000482  CE                into
00000483  FA                cli
00000484  CE                into
00000485  FA                cli
00000486  CE                into
00000487  FA                cli
00000488  CE                into
00000489  FA                cli
0000048A  CE                into
0000048B  FA                cli
0000048C  CE                into
0000048D  FA                cli
0000048E  CE                into
0000048F  FA                cli
00000490  CE                into
00000491  FA                cli
00000492  CE                into
00000493  FA                cli
00000494  CE                into
00000495  FA                cli
00000496  CE                into
00000497  FA                cli
00000498  CE                into
00000499  FA                cli
0000049A  CE                into
0000049B  FA                cli
0000049C  CE                into
0000049D  FA                cli
0000049E  CE                into
0000049F  FA                cli
000004A0  CE                into
000004A1  FA                cli
000004A2  CE                into
000004A3  FA                cli
000004A4  CE                into
000004A5  FA                cli
000004A6  CE                into
000004A7  FA                cli
000004A8  CE                into
000004A9  FA                cli
000004AA  CE                into
000004AB  FA                cli
000004AC  CE                into
000004AD  FA                cli
000004AE  CE                into
000004AF  FA                cli
000004B0  CE                into
000004B1  FA                cli
000004B2  CE                into
000004B3  FA                cli
000004B4  CE                into
000004B5  FA                cli
000004B6  CE                into
000004B7  FA                cli
000004B8  CE                into
000004B9  FA                cli
000004BA  CE                into
000004BB  FA                cli
000004BC  CE                into
000004BD  FA                cli
000004BE  CE                into
000004BF  FA                cli
000004C0  CE                into
000004C1  FA                cli
000004C2  CE                into
000004C3  FA                cli
000004C4  CE                into
000004C5  FA                cli
000004C6  CE                into
000004C7  FA                cli
000004C8  CE                into
000004C9  FA                cli
000004CA  CE                into
000004CB  FA                cli
000004CC  CE                into
000004CD  FA                cli
000004CE  CE                into
000004CF  FA                cli
000004D0  CE                into
000004D1  FA                cli
000004D2  CE                into
000004D3  FA                cli
000004D4  CE                into
000004D5  FA                cli
000004D6  CE                into
000004D7  FA                cli
000004D8  CE                into
000004D9  FA                cli
000004DA  CE                into
000004DB  FA                cli
000004DC  CE                into
000004DD  FA                cli
000004DE  CE                into
000004DF  FA                cli
000004E0  CE                into
000004E1  FA                cli
000004E2  CE                into
000004E3  FA                cli
000004E4  CE                into
000004E5  FA                cli
000004E6  CE                into
000004E7  FA                cli
000004E8  CE                into
000004E9  FA                cli
000004EA  CE                into
000004EB  FA                cli
000004EC  CE                into
000004ED  FA                cli
000004EE  CE                into
000004EF  FA                cli
000004F0  CE                into
000004F1  FA                cli
000004F2  CE                into
000004F3  FA                cli
000004F4  CE                into
000004F5  FA                cli
000004F6  CE                into
000004F7  FA                cli
000004F8  CE                into
000004F9  FA                cli
000004FA  CE                into
000004FB  FA                cli
000004FC  CE                into
000004FD  FA                cli
000004FE  CE                into
000004FF  FA                cli
00000500  CE                into
00000501  FA                cli
00000502  CE                into
00000503  FA                cli
00000504  CE                into
00000505  FA                cli
00000506  CE                into
00000507  FA                cli
00000508  CE                into
00000509  FA                cli
0000050A  CE                into
0000050B  FA                cli
0000050C  CE                into
0000050D  FA                cli
0000050E  CE                into
0000050F  FA                cli
00000510  CE                into
00000511  FA                cli
00000512  CE                into
00000513  FA                cli
00000514  CE                into
00000515  FA                cli
00000516  CE                into
00000517  FA                cli
00000518  CE                into
00000519  FA                cli
0000051A  CE                into
0000051B  FA                cli
0000051C  CE                into
0000051D  FA                cli
0000051E  CE                into
0000051F  FA                cli
00000520  CE                into
00000521  FA                cli
00000522  CE                into
00000523  FA                cli
00000524  CE                into
00000525  FA                cli
00000526  CE                into
00000527  FA                cli
00000528  CE                into
00000529  FA                cli
0000052A  CE                into
0000052B  FA                cli
0000052C  CE                into
0000052D  FA                cli
0000052E  CE                into
0000052F  FA                cli
00000530  CE                into
00000531  FA                cli
00000532  CE                into
00000533  FA                cli
00000534  CE                into
00000535  FA                cli
00000536  CE                into
00000537  FA                cli
00000538  CE                into
00000539  FA                cli
0000053A  CE                into
0000053B  FA                cli
0000053C  CE                into
0000053D  FA                cli
0000053E  CE                into
0000053F  FA                cli
00000540  CE                into
00000541  FA                cli
00000542  CE                into
00000543  FA                cli
00000544  CE                into
00000545  FA                cli
00000546  CE                into
00000547  FA                cli
00000548  CE                into
00000549  FA                cli
0000054A  CE                into
0000054B  FA                cli
0000054C  CE                into
0000054D  FA                cli
0000054E  CE                into
0000054F  FA                cli
00000550  CE                into
00000551  FA                cli
00000552  CE                into
00000553  FA                cli
00000554  CE                into
00000555  FA                cli
00000556  CE                into
00000557  FA                cli
00000558  CE                into
00000559  FA                cli
0000055A  CE                into
0000055B  FA                cli
0000055C  CE                into
0000055D  FA                cli
0000055E  CE                into
0000055F  FA                cli
00000560  CE                into
00000561  FA                cli
00000562  CE                into
00000563  FA                cli
00000564  CE                into
00000565  FA                cli
00000566  CE                into
00000567  FA                cli
00000568  CE                into
00000569  FA                cli
0000056A  CE                into
0000056B  FA                cli
0000056C  CE                into
0000056D  FA                cli
0000056E  CE                into
0000056F  FA                cli
00000570  CE                into
00000571  FA                cli
00000572  CE                into
00000573  FA                cli
00000574  CE                into
00000575  FA                cli
00000576  CE                into
00000577  FA                cli
00000578  CE                into
00000579  FA                cli
0000057A  CE                into
0000057B  FA                cli
0000057C  CE                into
0000057D  FA                cli
0000057E  CE                into
0000057F  FA                cli
00000580  CE                into
00000581  FA                cli
00000582  CE                into
00000583  FA                cli
00000584  CE                into
00000585  FA                cli
00000586  CE                into
00000587  FA                cli
00000588  CE                into
00000589  FA                cli
0000058A  CE                into
0000058B  FA                cli
0000058C  CE                into
0000058D  FA                cli
0000058E  CE                into
0000058F  FA                cli
00000590  CE                into
00000591  FA                cli
00000592  CE                into
00000593  FA                cli
00000594  CE                into
00000595  FA                cli
00000596  CE                into
00000597  FA                cli
00000598  CE                into
00000599  FA                cli
0000059A  CE                into
0000059B  FA                cli
0000059C  CE                into
0000059D  FA                cli
0000059E  CE                into
0000059F  FA                cli
000005A0  CE                into
000005A1  FA                cli
000005A2  CE                into
000005A3  FA                cli
000005A4  CE                into
000005A5  FA                cli
000005A6  CE                into
000005A7  FA                cli
000005A8  CE                into
000005A9  FA                cli
000005AA  CE                into
000005AB  FA                cli
000005AC  CE                into
000005AD  FA                cli
000005AE  CE                into
000005AF  FA                cli
000005B0  CE                into
000005B1  FA                cli
000005B2  CE                into
000005B3  FA                cli
000005B4  CE                into
000005B5  FA                cli
000005B6  CE                into
000005B7  FA                cli
000005B8  CE                into
000005B9  FA                cli
000005BA  CE                into
000005BB  FA                cli
000005BC  CE                into
000005BD  FA                cli
000005BE  CE                into
000005BF  FA                cli
000005C0  CE                into
000005C1  FA                cli
000005C2  CE                into
000005C3  FA                cli
000005C4  CE                into
000005C5  FA                cli
000005C6  CE                into
000005C7  FA                cli
000005C8  CE                into
000005C9  FA                cli
000005CA  CE                into
000005CB  FA                cli
000005CC  CE                into
000005CD  FA                cli
000005CE  CE                into
000005CF  FA                cli
000005D0  CE                into
000005D1  FA                cli
000005D2  CE                into
000005D3  FA                cli
000005D4  CE                into
000005D5  FA                cli
000005D6  CE                into
000005D7  FA                cli
000005D8  CE                into
000005D9  FA                cli
000005DA  CE                into
000005DB  FA                cli
000005DC  CE                into
000005DD  FA                cli
000005DE  CE                into
000005DF  FA                cli
000005E0  CE                into
000005E1  FA                cli
000005E2  CE                into
000005E3  FA                cli
000005E4  CE                into
000005E5  FA                cli
000005E6  CE                into
000005E7  FA                cli
000005E8  CE                into
000005E9  FA                cli
000005EA  CE                into
000005EB  FA                cli
000005EC  CE                into
000005ED  FA                cli
000005EE  CE                into
000005EF  FA                cli
000005F0  CE                into
000005F1  FA                cli
000005F2  CE                into
000005F3  FA                cli
000005F4  CE                into
000005F5  FA                cli
000005F6  CE                into
000005F7  FA                cli
000005F8  CE                into
000005F9  FA                cli
000005FA  CE                into
000005FB  FA                cli
000005FC  CE                into
000005FD  FA                cli
000005FE  CE                into
000005FF  FA                cli


WHAT IS FCMOV AND FCMOVU : "https://en.wikipedia.org/wiki/FCMOV" ==> C =CONDITION , F=FLOATING , U = UNORDERED == SO IT IS CAFE INSTEAD OF FACE FOR 2ND DISK  , AND NORMAL MOV  INSTRUCTION
"
'''
